@using System.Activities.Expressions
@using System.Web.UI.WebControls
@using BodyCompositionCalculator.Models.Calculation_Constants
@using Microsoft.Ajax.Utilities
@model BodyCompositionCalculator.Models.ViewModels.EditGoalViewModel


@{
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<!DOCTYPE html>
<head>
    <script src="https://kit.fontawesome.com/7ec14fb925.js" crossorigin="anonymous"></script>
    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    @Styles.Render("~/Content/datepicker")
</head>


<html lang="en">

<body>

    <h2 class="mb-4">@Model.Title</h2>
    @*@Html.ValidationSummary()*@

    @using (Html.BeginForm("AddNewGoal", "Home", FormMethod.Post, new { @id = "goalForm" }))

    {
        @*@Html.ValidationSummary()*@


            <div class="row">
                <div class="col-sm-12  col-md-6 col-xl-6 mb-4 ">
                    <div class="row align-items-center">
                        <label for="startDateText" class="col-12 col-md-4 nowrap col-lg-3 pl-0">Start Date</label>
                        <div class="col pl-0 ">
                            <div id="startDate" class="input-group date datepicker">
                                @Html.TextBoxFor(model => model.Goal.StartDate, "{0: dd MMM yyyy}", new { @id = "startDateText", @class = "form-control " })
                                <div class="input-group-append input-group-addon pl-0 pr-0">
                                    <span class="input-group-text">
                                        <span class="fa fa-calendar"></span>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="col-sm-12  col-md-6 col-xl-6 mb-4 ">
                    <div class="row align-items-center">
                        <label for="endDateText" class="col-12 col-md-4 nowrap col-lg-3 pl-0">End Date</label>
                        <div class="col pl-0">
                            <div id="endDate" class="input-group date datepicker">
                                @Html.TextBoxFor(model => model.Goal.EndDate, "{0: dd MMM yyyy}", new { @id = "endDateText", @class = "form-control " })
                                <div class="input-group-append input-group-addon pl-0">
                                    <span class="input-group-text">
                                        <span class="fa fa-calendar"></span>
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>



        var startWeightA = Model.StartWeightInputA == null ? "" : Model.StartWeightInputA;
        var startWeightB = Model.StartWeightInputB;
        var targetWeightA = Model.TargetWeightInputA == null ? "" : Model.TargetWeightInputA;
        var targetWeightB = Model.TargetWeightInputB;

        if (startWeightA.Equals("0"))
        {
            startWeightA = "";
            startWeightB = "";
        }

        if (targetWeightA.Equals("0"))
        {
            targetWeightA = "";
            targetWeightB = "";
        }

        if (@Model.WeightUnit.Equals(WeightUnits.LbsAndStone))
        {
            <div class="row">

                <div class="col-sm-12 col-md-6 mb-4 ">
                    <div class="row align-items-center">
                        <label for="startWeightInputA" class="col-12 col-md-4 nowrap col-lg-3 pl-0">Start Weight</label>
                        @Html.TextBoxFor(m => m.StartWeightInputA, new { @class = "form-control col", @id = "startWeightInputA", @min = "0", Value = startWeightA })
                        <label for="startWeightInputA" class=" form-text col-1 pl-0 ">st</label>
                        @Html.TextBoxFor(m => m.StartWeightInputB, new { @class = "form-control col", @id = "startWeightInputB", @min = "0", @max = "13", Value = startWeightB })
                        <label for="startWeightInputB" class=" form-text col-md-1 col-2 pl-0">lbs</label>
                    </div>
                    <div class="row ">
                        <div class="col-12 col-md-4 col-lg-3 "></div>
                        <div class="col pl-0 text-danger">
                            @Html.ValidationMessageFor(m => m.StartWeightInputA)
                        </div>
                        <div class="col-1"></div>
                        <div class="col pl-0 text-danger">
                            @Html.ValidationMessageFor(m => m.StartWeightInputB)
                        </div>
                        <div class="col-1"></div>
                    </div>
                </div>

                <div class="col-sm-12  col-md-6 mb-4">
                    <div class="row align-items-center">
                        <label for="targetWeightInputA" class="col-12 col-md-4 nowrap col-lg-3 pl-0">Target Weight</label>
                        @Html.TextBoxFor(m => m.TargetWeightInputA, new { @class = "form-control col", @id = "targetWeightInputA", @min = "0", Value = targetWeightA })
                        <label for="targetWeightInputA" class=" form-text col-1 pl-0 ">st</label>
                        @Html.TextBoxFor(m => m.TargetWeightInputB, new { @class = "form-control col", @id = "targetWeightInputB", @min = "0", @max = "13", Value = targetWeightB })
                        <label for="targetWeightInputB" class=" form-text col-md-1 col-2 pl-0">lbs</label>
                    </div>
                    <div class="row ">
                        <div class="col-12 col-md-4 col-lg-3 "></div>
                        <div class="col pl-0 text-danger">
                            @Html.ValidationMessageFor(m => m.TargetWeightInputA)
                        </div>
                        <div class="col-1"></div>
                        <div class="col pl-0 text-danger">
                            @Html.ValidationMessageFor(m => m.TargetWeightInputB)
                        </div>
                        <div class="col-1"></div>
                    </div>
                </div>
            </div>

            <div class="text-danger">
                @Html.ValidationMessageFor(m => m.Goal.StartWeightInKg)
            </div>
        }
        else
        {
            <div class="row">

                <div class="col-sm-12 col-md-6 mb-4 ">
                    <div class="row align-items-center">
                        <label for="startWeightInputA"class="col-12 col-md-4 nowrap col-lg-3 pl-0">Start Weight</label>
                        @Html.TextBoxFor(m => m.StartWeightInputA, new { @class = "form-control col", @id = "startWeightInputA", @min = "0", Value = startWeightA })
                        @Html.HiddenFor(m => m.StartWeightInputB, new { Value = 0 })
                        <label for="startWeightInputA" class=" form-text col-2 col-md-1 pl-0 ">@Model.WeightUnit</label>
                    </div>
                    <div class="row">
                        <div class="col-12 col-md-4 col-lg-3"></div>
                        <div class="col text-danger pl-0">
                            @Html.ValidationMessageFor(m=>m.StartWeightInputA)
                        </div>
                    </div>
                </div>

                <div class="col-sm-12  col-md-6 mb-4">
                    <div class="row align-items-center">
                        <label for="targetWeightInputA"class="col-12 col-md-4 nowrap col-lg-3 pl-0">Target Weight</label>
                        @Html.TextBoxFor(m => m.TargetWeightInputA, new { @class = "form-control col", @id = "targetWeightInputA", @min = "0", Value = targetWeightA })
                        @Html.HiddenFor(m => m.TargetWeightInputB, new { Value = 0 })
                        <label for="targetWeightInputA" class=" form-text col-2 col-md-1 pl-0 ">@Model.WeightUnit</label>
                    </div>
                    <div class="row">
                        <div class="col-12 col-md-4 col-lg-3"></div>
                        <div class="col text-danger pl-0">
                            @Html.ValidationMessageFor(m=>m.TargetWeightInputA)
                        </div>
                    </div>
                </div>
            </div>

        }


        <div class="row ">
            <div class="col-sm-12  col-md-6  mb-4">
                <div class="row align-items-center">
                    <label for="startBfText"class="col-12 col-md-4 nowrap col-lg-3 pl-0">Start Body Fat</label>
                    @Html.TextBoxFor(m => m.StartBodyFat, new { @id = "startBfText", @class = "form-control col", @min = "0" })
                    <label class=" col-2 col-md-1 pl-0">%</label>
                </div>
                <div class="row">
                    <div class="col-12 col-md-4 col-lg-3"></div>
                    <div class="col text-danger pl-0">
                        @Html.ValidationMessageFor(m=>m.StartBodyFat)
                    </div>
                </div>
            </div>

            <div class="col-sm-12  col-md-6  mb-4">
                <div class="row align-items-center">
                    <label for="targetBfText" class="col-12 col-md-4 col-lg-3 pl-0">Target Body Fat</label>
                    @Html.TextBoxFor(m => m.TargetBodyFat, new { @id = "targetBfText", @class = "form-control col", @min = "0" })
                    <label class=" col-2 col-md-1 pl-0">%</label>
                </div>
                <div class="row">
                    <div class="col-12 col-md-4 col-lg-3"></div>
                    <div class="col text-danger pl-0">
                        @Html.ValidationMessageFor(m=>m.TargetBodyFat)
                    </div>
                </div>
            </div>
        </div>


        <label for="calculationBasis" class="row" >Calculate Goal Plan Using:</label>
        @Html.DropDownListFor(expression: m => m.CalculationBasisChoice, selectList: Model.CalculationBasis, htmlAttributes: new { @class = " form-control row mb-4 ", @id = "calculationBasis" })


        <div class="row form-check mb-4">
            @Html.CheckBoxFor(m => m.AddAsCheckIn, new { @id = "checkInCheckBox", @class = " form-check-input" })
            <label for="checkInCheckBox"class="form-check-label">Check in with these details</label>
        </div>

        <div class="row form-check mb-4">
            @Html.CheckBoxFor(m => m.TrackBodyFat, new { @id = "trackBfCheckBox", @class = " form-check-input" })
            <label for="trackBfCheckBox"class="form-check-label">Track body fat percentage</label>
        </div>



        <button type="submit" class="btn btn-primary">Save</button>


        @Html.HiddenFor(m => m.Goal.Id)
        @Html.HiddenFor(m => m.Goal.UserProfileId)
        @Html.HiddenFor(m => m.Goal.FinalWeightInKg)
        @Html.HiddenFor(m => m.Goal.FinalBodyFat)
        @Html.HiddenFor(m => m.WeightUnit)
        @Html.HiddenFor(m=>m.Goal.StartBodyFat)
        @Html.HiddenFor(m=>m.Goal.TargetBodyFat)
        @Html.HiddenFor(m=>m.Goal.TrackBodyFat)
        @Html.AntiForgeryToken()
        ;



      }



                <script>

                    $(document).ready(function () {


                        var startBfText = $("#startBfText");
                        var targetBfText = $("#targetBfText");
                        var calculationBasis = $("#calculationBasis");


                        function handleBodyFatReadOnly() {
                            var checked = $("#trackBfCheckBox").prop("checked");

                            function setBfReadOnly(bool) {
                                startBfText.prop('readonly', bool);
                                targetBfText.prop('readonly', bool);
                            }

                            if (calculationBasis.val() === "Weight" && !checked) {
                                setBfReadOnly(true);
                            } else {
                                setBfReadOnly(false);
                            }

                        };

                        handleBodyFatReadOnly();

                        $("#trackBfCheckBox").on('change',
                            function () {
                                handleBodyFatReadOnly();
                            });


                        var checkBox = $("#checkInCheckBox");
                        var checkBoxVal = checkBox.val();

                        function handleTargetWeightReadOnly() {
                            var targetWeightA = $("#targetWeightInputA");
                            var targetWeightB = $("#targetWeightInputB");

                            function changeTargetWeight(bool) {
                                targetWeightA.prop('readonly', bool);
                                targetWeightB.prop('readonly', bool);
                            }

                            if (calculationBasis.val() === "Weight") {
                                changeTargetWeight(false);
                            } else if (calculationBasis.val() === "Body Fat") {
                                changeTargetWeight(true);
                            }
                        }

                        handleTargetWeightReadOnly();

                        calculationBasis.on("change",
                            function () {
                                handleTargetWeightReadOnly();
                                handleBodyFatReadOnly();
                            }
                        );


                        checkBox.change(function () {
                            checkBoxVal = this.checked;
                        });

                        function greyCheckBox(dt) {

                            var today = new Date();
                            today = new Date(Date.UTC(today.getFullYear(), today.getMonth(), today.getDate()));

                            if (dt > today) {
                                checkBox.prop('checked', false);
                                checkBox.prop('disabled', true);

                            } else {
                                checkBox.prop('checked', checkBoxVal);
                                checkBox.prop('disabled', false);
                            }

                        }


                        $('#startDate').datepicker({
                            format: 'dd M yyyy',
                            todayBtn: true,
                            autoclose: true,
                            todayHighlight: true
                        });



                        //If the default date is used, set the dates
                        var startDate = $('#startDate').datepicker('getDate');
                        greyCheckBox(startDate);


                        if (startDate.getFullYear() === 0) {
                            $('#startDate').datepicker('clearDates');
                            $('#endDate').datepicker('clearDates');
                        }


                        //https://bootstrap-datepicker.readthedocs.io/en/
                        $('#startDate.datepicker').datepicker({
                            format: 'dd M yyyy',
                            todayBtn: true,
                            autoclose: true,
                            todayHighlight: true
                        }).on('changeDate',
                            function (selected) {
                                var dateSelected = new Date(selected.date.valueOf());
                                var minDate = new Date(selected.date.valueOf() + (1000 * 60 * 60 * 24 * 28));
                                $('#endDate').datepicker({ format: 'dd M yyyy' }); // <--THIS IS THE LINE ADDED
                                $('#endDate').datepicker('setStartDate', dateSelected);
                                $('#endDate').datepicker('setDate', minDate); // <--THIS IS THE LINE ADDED
                                greyCheckBox(dateSelected);
                                //$(this).datepicker('hide');
                            });

                        $('#endDate').datepicker({
                            format: 'dd M yyyy',
                            todayBtn: true,
                            autoclose: true,
                            todayHighlight: true
                        });


                    });

                </script>



        </body>

</html>
